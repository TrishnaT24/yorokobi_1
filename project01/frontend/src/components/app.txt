import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import Header from './components/Header';
import RestaurantCard from './components/RestaurantCard';
import Map from './components/Map';
import Home from './components/Home';
import FilterComponent from './components/FilterComponent';

function App() {
  const [restaurants, setRestaurants] = useState([]);
  const [filteredRestaurants, setFilteredRestaurants] = useState([]);
  const [filters, setFilters] = useState({
    cuisines: [],
    rating: []
  });
  const [isDropdownOpen, setDropdownOpen] = useState(false);

  useEffect(() => {
    const fetchRestaurants = async () => {
      try {
        const response = await fetch('http://localhost:3000/api/restaurants/restaurants');
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();
        setRestaurants(data);
        setFilteredRestaurants(data);
      } catch (err) {
        console.error('Error:', err);
      }
    };

    fetchRestaurants();
  }, []);

  useEffect(() => {
    const applyFilters = () => {
      let filtered = [...restaurants];
      
      if (filters.cuisines.length > 0) {
        filtered = filtered.filter(restaurant =>
          restaurant.cuisines.some(cuisine => 
            filters.cuisines.includes(cuisine)
          )
        );
      }
      
      if (filters.rating.length > 0) {
        filtered = filtered.filter(restaurant =>
          filters.rating.includes(`${restaurant.rating} Stars`)
        );
      }
      
      setFilteredRestaurants(filtered);
    };

    applyFilters();
  }, [filters, restaurants]);

  const handleFilterChange = (category, value) => {
    setFilters(prevFilters => {
      const updatedCategory = prevFilters[category].includes(value)
        ? prevFilters[category].filter(item => item !== value)
        : [...prevFilters[category], value];
        
      return {
        ...prevFilters,
        [category]: updatedCategory
      };
    });
  };

  const filterOptions = {
    cuisines: [...new Set(restaurants.flatMap(restaurant => restaurant.cuisines))],
    rating: ['5 Stars', '4 Stars', '3 Stars', '2 Stars']
  };

  const toggleDropdown = () => {
    setDropdownOpen(!isDropdownOpen);
  };

  return (
    <Router>
      <Header />
      <Routes>
        <Route path='/' element={<Home />} />
        <Route
          path='/book-table'
          element={
            <div className="p-4">
              <div className="relative mb-4">
                <button
                  onClick={toggleDropdown}
                  className="bg-blue-500 text-white px-4 py-2 rounded"
                >
                  Filter Restaurants
                </button>
                {isDropdownOpen && (
                  <div className="absolute z-10 mt-2 bg-white border rounded shadow-lg">
                    <FilterComponent 
                      filterOptions={filterOptions} 
                      onFilterChange={handleFilterChange} 
                    />
                  </div>
                )}
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {filteredRestaurants.map((restaurant, index) => (
                  <RestaurantCard key={index} restaurant={restaurant} />
                ))}
              </div>
            </div>
          }
        />
        <Route path='/map' element={<Map />} />
      </Routes>
    </Router>
  );
}

export default App;